#include<bits/stdc++.h>

using  namespace std;

/*
给定一个字符串 queryIP。如果是有效的 IPv4 地址，返回 "IPv4" ；如果是有效的 IPv6 地址，
返回 "IPv6" ；如果不是上述类型的 IP 地址，返回 "Neither" 。

有效的IPv4地址 是 “x1.x2.x3.x4” 形式的IP地址。 其中 0 <= xi <= 255 且 xi 不能包含 前导零。
例如: “192.168.1.1” 、 “192.168.1.0” 为有效IPv4地址， “192.168.01.1” 为无效IPv4地址; “192.168.1.00” 、 
“192.168@1.1” 为无效IPv4地址。

一个有效的IPv6地址 是一个格式为“x1:x2:x3:x4:x5:x6:x7:x8” 的IP地址，其中:

1 <= xi.length <= 4
xi 是一个 十六进制字符串 ，可以包含数字、小写英文字母( 'a' 到 'f' )和大写英文字母( 'A' 到 'F' )。
在 xi 中允许前导零。
例如 "2001:0db8:85a3:0000:0000:8a2e:0370:7334" 和 "2001:db8:85a3:0:0:8A2E:0370:7334" 
是有效的 IPv6 地址，而 "2001:0db8:85a3::8A2E:037j:7334" 和 "02001:0db8:85a3:0000:0000:8a2e:0370:7334" 
是无效的 IPv6 地址。
*/

class Solution {
    string IPv4 = "IPv4";
    string IPv6 = "IPv6";
    string Neither = "Neither";
    bool validIPv4(string s){
        if(s.size() > 1 && s[0] == '0')
            return false;
        if(s.size() == 0){
            return false;
        }
        for(char c : s){
            if(!isdigit(c)){
                return false;
            }
        }
        int num = stoi(s);
        if(num < 0 || num > 255){
            return false;
        }
        return true;
    }
    bool validIPv6(string s){
        int size = s.size();
        if(size == 0 || size > 4){
            return false;
        }
        for(char c : s){
            if(isdigit(c))
                continue;
            else if(isalpha(c) && tolower(c) >= 'a' && tolower(c) <= 'f'){
                continue;
            }else{
                return false;
            }
        }
        return true;
    }
public:
    string validIPAddress(string queryIP) {
        int size = queryIP.size();
        if(size == 0) return Neither;
        if(queryIP.find('.') != string::npos){      // IPv4;
            int cnt = 0;
            int beginIndex = 0;
            string temp = "";
            for(int i = 0;i<size;i++){             
                if(queryIP[i] == '.'){
                    temp = queryIP.substr(beginIndex,i-beginIndex);
                    cnt++;
                    beginIndex = i + 1;
                    if(validIPv4(temp) == false){
                        return Neither;
                    }
                    if(cnt == 3){
                        string temp2 = queryIP.substr(beginIndex);
                        if(validIPv4(temp2) == false){
                            return Neither;
                        }
                    }

                }else if(queryIP[i] == ':'){
                    return Neither;
                }else if((i == size-1 && cnt != 3) || i-beginIndex > 3){
                    return Neither;
                }

            }
            return IPv4;
        }else{
            int cnt = 0;
            int beginIndex = 0;
            string temp = "";
            for(int i = 0;i<size;i++){
                if(queryIP[i] == ':'){
                    temp = queryIP.substr(beginIndex,i-beginIndex);
                    cnt++;
                    beginIndex = i + 1;
                    if(validIPv6(temp) == false){
                        return Neither;
                    }
                    if(cnt == 7){
                        string temp2 = queryIP.substr(beginIndex);
                        if(validIPv6(temp2) == false){
                            return Neither;
                        }
                    }
                }else if(queryIP[i] == '.'){
                    return Neither;
                }else if(i == size-1 && cnt != 7){
                    return Neither;
                }
            }
            return IPv6;
        }
        return "";
    }
};

int main(int argc, char const *argv[])
{
    string query
    Solution sol;
    cout<<sol.validIPAddress(queryIP)<<endl;
    system("pause");
    return 0;
}
